Choses à faire :

1) (J) Créer une base de donnée utilisateur. Elle sauvegardera les exos résolus + permettra à l'utilisateur de créer ses propres exercices.
1,5) Adapter removeLastInference aux hypothèses.
2) Mettre des raccourcis claviers pour les règles. (Par exemple la première règle (outre rep et reit) serait 1/&, la seconde 2/é, la troisième 3/", etc.)
3) Rajouter des options pour désactiver diverses choses des locutions grecques et latines.
3) Rajouter dans la page d'exercice, une petite icône de bulle à côté du titre : quand on met sa souris dessus (voire quand on clique dessus) on aura un commentaire de l'exercice. Il y a pas mal d'exos où ça peut être une info intéressante (et complémentaire de l'info apportée par les signification possible des prémisses).
4) Faire apparaître une ligne transparente pour le prochain emplacement d'inférence, ligne transparente (qui blink) disant "< prochaine inférence >" ou quelque chose du genre. Et cette ligne n'apparaît plus lorsque la conclusion a été trouvée.
4) Faire apparaître en transparence une prévisualisation de l'inférence qu'on va produire en cliquant sur une prémisse, sur une règle, etc.
5) Faire que les numéros des commentaires de la règle ⊃i ne soient pas séparés par une virgule et un espace, mais par un trait d'union.
5) Pour la règle ∧i (et quelques autres), ce serait pas mal de mettre "&" pour séparer les numéros d'inférence qui justifient l'utilisation de la règle. Ca montrerait qu'il n'y avait que 2 inférences utilisés pour cette règle (ça clarifierait donc l'interface ET le fonctionnement de la règle de logique en question).
5) Tant que l'utilisateur n'a pas rempli toutes les conditions requises pour une règle, le bouton de confirmation de la règle doit rester désactivé.

Codes à utiliser plus souvent :
- { items, inferences, exercices, data } = this.state // ce qui est à droite permet de créer rapidement des objets "items", "inferences", "exercices", "data", à partir de ce que contient this.state
- "position: absolute" dans le css concernant la div de mon titre "déducteur et formaliseur logique". (Ca permet de dire qu'une div est à une position très précise par rapport à un parent. Mais pour cela il faut que le parent ait eu une position relative définie (par "position:relative").)
- Notion de "wildcard" en css : c'est quand on vise "n'importe quoi qui est en css. Pour utiliser cela il faut mettre ".NomDeClasse > #".
-     if (Object.keys(this.state.currentExercise).length === 0) {}
      // Cette ligne permet de regarder si l'objet currentExercise contient des clés, grâce à Object.keys (qui renvoie les clés sous forme de tableau). C'est plus fiable de le faire comme ça que de vérifier si c'est un tableau vide.
- "Objet.keys(exempleTableau)" permet de renvoyer les clés d'un objet sous forme de tableau.

Modifications/ajouts au sujet des citations grecques et latines :
- Rajouter dans les locutions grecques "l'accès à la connaissance se fait dans la douleur"
- Rajouter cet extrait de la Métaphysique d'Aristote, (source : "Métaphysique, A, 2, 982 b 10") (le texte d'origine est là http://remacle.org/bloodwolf/philosophes/Aristote/metaphysique1.htm ) "A l'origine comme aujourd'hui, c'est l’étonnement qui poussa les premiers penseurs aux spéculations philosophiques. Au début, leur étonnement porta sur les difficultés qui se présentaient les premières à l'esprit ; puis, s'avançant ainsi peu à peu, ils étendirent leur exploration à des problèmes plus importants, tels que les phénomènes de la Lune, ceux du Soleil et des Étoiles, enfin la genèse de l'Univers. Or, douter et s’étonner, c’est reconnaître sa propre ignorance [...].",
